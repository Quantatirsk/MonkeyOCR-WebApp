services:
  monkeyocr-webapp:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${API_PORT:-8001}:8001"  # Full-stack app: API + Frontend (SPA fallback)
    environment:
      # Backend configuration
      - PYTHONPATH=/app
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # API configuration
      - MONKEYOCR_API_BASE_URL=${MONKEYOCR_API_BASE_URL:-https://ocr.teea.cn}
      - MONKEYOCR_API_KEY=${MONKEYOCR_API_KEY}
      
      # LLM configuration (optional)
      - LLM_BASE_URL=${LLM_BASE_URL}
      - LLM_API_KEY=${LLM_API_KEY}
      - LLM_MODEL_NAME=${LLM_MODEL_NAME:-gpt-4o-mini}
      
      # Redis configuration
      - REDIS_ENABLED=${REDIS_ENABLED:-true}
      - REDIS_HOST=redis
      - REDIS_PORT=6379

      # Timezone
      - TZ=Asia/Shanghai
    volumes:
      # Persistent data storage  
      - ./data:/app/data
      # Note: ./static removed to avoid overriding built-in frontend files
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - api-network
    depends_on:
      - redis

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory ${REDIS_MAX_MEMORY:-256mb} --maxmemory-policy allkeys-lru
    volumes:
      - ./redis_data:/data
    networks:
      - api-network
    # Remove external port exposure for production security
    # ports:
    #   - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

networks:
  api-network:
    driver: bridge